// DO NOT EDIT: generated by fsdgenjs
/* eslint-disable */

import { HttpClientUtility, IServiceResult, IHttpClientOptions } from 'facility-core';
import { INoFlake, ICreateProjectRequest, ICreateProjectResponse, ISubmitTestSuiteResultRequest, ISubmitTestSuiteResultResponse, IGetTestHistoryRequest, IGetTestHistoryResponse, IProject, ITestSuiteRun, ITestResult, IHistoricalTestResult, TestResultStatus } from './noFlakeTypes';
export * from './noFlakeTypes';

/** Provides access to NoFlake over HTTP via fetch. */
export function createHttpClient({ fetch, baseUri }: IHttpClientOptions): INoFlake {
	return new NoFlakeHttpClient(fetch, baseUri);
}

const { fetchResponse, createResponseError, createRequiredRequestFieldError } = HttpClientUtility;
type IFetch = HttpClientUtility.IFetch;
type IFetchRequest = HttpClientUtility.IFetchRequest;

class NoFlakeHttpClient implements INoFlake {
	constructor(fetch: IFetch, baseUri?: string) {
		if (typeof fetch !== 'function') {
			throw new TypeError('fetch must be a function.');
		}
		if (typeof baseUri === 'undefined') {
			baseUri = '';
		}
		if (/[^\/]$/.test(baseUri)) {
			baseUri += '/';
		}
		this._fetch = fetch;
		this._baseUri = baseUri;
	}

	/** Creates a project which is a grouping for test suite runs. */
	public createProject(request: ICreateProjectRequest, context?: unknown): Promise<IServiceResult<ICreateProjectResponse>> {
		const uri = 'createProject';
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(request)
		};
		return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest, context)
			.then(result => {
				const status = result.response.status;
				let value: ICreateProjectResponse | null = null;
				if (status === 200) {
					if (result.json) {
						value = result.json as ICreateProjectResponse | null;
					}
				}
				if (!value) {
					return createResponseError(status, result.json) as IServiceResult<ICreateProjectResponse>;
				}
				return { value: value };
			});
	}

	/** Submits the results of a test suite after it's been run. */
	public submitTestSuiteResult(request: ISubmitTestSuiteResultRequest, context?: unknown): Promise<IServiceResult<ISubmitTestSuiteResultResponse>> {
		const uri = 'submitTestSuiteResult';
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(request)
		};
		return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest, context)
			.then(result => {
				const status = result.response.status;
				let value: ISubmitTestSuiteResultResponse | null = null;
				if (status === 200) {
					value = {};
				}
				if (!value) {
					return createResponseError(status, result.json) as IServiceResult<ISubmitTestSuiteResultResponse>;
				}
				return { value: value };
			});
	}

	/** Gets the last 10 runs of this test. */
	public getTestHistory(request: IGetTestHistoryRequest, context?: unknown): Promise<IServiceResult<IGetTestHistoryResponse>> {
		const uri = 'getTestHistory';
		const fetchRequest: IFetchRequest = {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(request)
		};
		return fetchResponse(this._fetch, this._baseUri + uri, fetchRequest, context)
			.then(result => {
				const status = result.response.status;
				let value: IGetTestHistoryResponse | null = null;
				if (status === 200) {
					if (result.json) {
						value = result.json as IGetTestHistoryResponse | null;
					}
				}
				if (!value) {
					return createResponseError(status, result.json) as IServiceResult<IGetTestHistoryResponse>;
				}
				return { value: value };
			});
	}

	private _fetch: IFetch;
	private _baseUri: string;
}
