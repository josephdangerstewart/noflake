[info(version: 0.1.0)]
service NoFlake;

/// Creates a project which is a grouping for test suite runs.
method createProject
{
	project: Project;
}:
{
	project: Project;
}

/// Submits the results of a test suite after it's been run.
method submitTestSuiteResult
{
	suite: TestSuiteRun;
	results: TestResult[];
}:
{
}

/// Gets the last 10 runs of this test.
method getTestHistory
{
	testId: string;
	projectId: string;
}:
{
	history: HistoricalTestResult[];
}

data Project
{
	projectId: string;
	name: string;
}

/// Represents the run of a full test suite
data TestSuiteRun
{
	/// Required. The sha of the git commit for which the test suite was run.
	commitSha: string;

	/// When this test suite was run. Defaults to current time.
	runDate: datetime;

	/// Required. The project this run is associated with
	projectId: string;

	/// The context in which the build was run. Defaults to unknown.
	context: TestRunBuildContext;
}

/// The result of a single test
data TestResult
{
	/// Required. An opaque token identifying this test.
	testId: string;

	/// Required. The ending result of the test.
	status: TestResultStatus;

	/// Null if the test passed. Defaults to empty array.
	errors: string[];

	/// A value of 1 indicates certainty that this test flaked (e.g. the test failed, was retried, and passed).
	/// A value of 0 indicates either the test did not flake (e.g. the test passed on the first try) or it is unknown if the test flaked or not.
	/// Values in between indicate the test may have flaked.
	[validate(value: 0..1)]
	flakeConfidence: decimal;
}

/// A test result with historical context
data HistoricalTestResult
{
	/// The result of the test
	testResult: TestResult;

	/// The run this test result is associated with
	suiteRun: TestSuiteRun;
}

enum TestResultStatus
{
	pass,
	fail
}

enum TestRunBuildContext
{
	pr,
	main,
	local,
	background,
	unknown,
}
